# Fichier docker-compose.yml pour Baserow sur Coolify avec Caddy intégré
version: "3.4"

services:
  # Caddy est le reverse proxy qui gère tout le trafic de l'application.
  caddy:
    image: caddy:2
    restart: unless-stopped
    environment:
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      PRIVATE_WEB_FRONTEND_URL: http://web-frontend:3000
      PRIVATE_BACKEND_URL: http://backend:8000
    volumes:
      # Pointeur vers le fichier de configuration Caddyfile local
      - ./Caddyfile:/etc/caddy/Caddyfile
      - media:/baserow/media
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - baserow_net

  # Le service API principal (le cœur de Baserow).
  backend:
    image: baserow/backend:1.34.2
    restart: unless-stopped
    environment:
      SECRET_KEY: ${SECRET_KEY}
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME:-baserow}
      DATABASE_USER: ${DATABASE_USER:-baserow}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PRIVATE_BACKEND_URL: http://backend:8000
    volumes:
      - media:/baserow/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - baserow_net

  # Le service de l'interface utilisateur.
  web-frontend:
    image: baserow/web-frontend:1.34.2
    restart: unless-stopped
    environment:
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      PRIVATE_BACKEND_URL: http://backend:8000
    depends_on:
      backend:
        condition: service_started
    networks:
      - baserow_net

  # Workers pour les tâches de fond.
  celery:
    image: baserow/backend:1.34.2
    restart: unless-stopped
    command: celery-worker
    environment:
      SECRET_KEY: ${SECRET_KEY}
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME:-baserow}
      DATABASE_USER: ${DATABASE_USER:-baserow}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PRIVATE_BACKEND_URL: http://backend:8000
    volumes:
      - media:/baserow/media
    depends_on:
      - backend
    networks:
      - baserow_net

  celery-export-worker:
    image: baserow/backend:1.34.2
    restart: unless-stopped
    command: celery-exportworker
    environment:
      SECRET_KEY: ${SECRET_KEY}
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME:-baserow}
      DATABASE_USER: ${DATABASE_USER:-baserow}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PRIVATE_BACKEND_URL: http://backend:8000
    volumes:
      - media:/baserow/media
    depends_on:
      - backend
    networks:
      - baserow_net

  celery-beat-worker:
    image: baserow/backend:1.34.2
    restart: unless-stopped
    command: celery-beat
    environment:
      SECRET_KEY: ${SECRET_KEY}
      BASEROW_PUBLIC_URL: ${BASEROW_PUBLIC_URL}
      DATABASE_HOST: db
      DATABASE_NAME: ${DATABASE_NAME:-baserow}
      DATABASE_USER: ${DATABASE_USER:-baserow}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      PRIVATE_BACKEND_URL: http://backend:8000
    volumes:
      - media:/baserow/media
    depends_on:
      - backend
    networks:
      - baserow_net

  # Services de données.
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATABASE_USER:-baserow}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME:-baserow}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-baserow}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - baserow_net

  redis:
    image: redis:6
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - baserow_net

  # Service utilitaire pour corriger les permissions.
  volume-permissions-fixer:
    image: bash:4.4
    command: chown 9999:9999 -R /baserow/media
    volumes:
      - media:/baserow/media
    restart: "no"
    networks:
      - baserow_net

# Déclaration des volumes et du réseau personnalisé.
volumes:
  pgdata:
  media:
  caddy_data:
  caddy_config:

networks:
  baserow_net:
    driver: bridge
